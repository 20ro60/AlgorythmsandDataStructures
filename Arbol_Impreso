#include <GLFW/glfw3.h>

#include <iostream>
#include <queue>
#include <vector>

using namespace std;

struct CBinTreeNode
{
    CBinTreeNode(int v)
    {
        value = v;
        nodes[0] = nodes[1] = 0;
    }
    CBinTreeNode* nodes[2];
    int value;
};

class CBinTree
{
public:
    CBinTree();
    void Print();
    bool Insert(int x);
    bool Remove(int x);
    CBinTreeNode* root;
private:
    bool Find(int x, CBinTreeNode**& p);
    CBinTreeNode** Rep(CBinTreeNode** p);
    void InOrder(CBinTreeNode* n);
    void Levels(CBinTreeNode* n);
};

CBinTree::CBinTree()
{
    root = 0;
}

bool CBinTree::Find(int x, CBinTreeNode**& p)
{
    for (p = &root; *p && (*p)->value != x;
        p = &((*p)->nodes[x > (*p)->value]));
    return *p != 0;
}

bool CBinTree::Insert(int x)
{
    CBinTreeNode** p;
    if (Find(x, p)) return 0;
    *p = new CBinTreeNode(x);
    return 1;
}

void CBinTree::InOrder(CBinTreeNode* n)
{
    if (!n) return;
    InOrder(n->nodes[0]);
    std::cout << n->value << " ";
    InOrder(n->nodes[1]);
}

void CBinTree::Levels(CBinTreeNode* n)
{
    if (!n) return;
    std::queue<std::pair<CBinTreeNode*, int>> q;
    q.push({ n,0 });
    int l = 0;
    while (!q.empty())
    {
        int last = l;
        std::pair<CBinTreeNode*, int> pp = q.front();
        CBinTreeNode* nn = pp.first;
        l = pp.second;
        if (nn->nodes[0])  q.push({ nn->nodes[0],l + 1 });
        if (nn->nodes[1])  q.push({ nn->nodes[1],l + 1 });
        if (last != l)    std::cout << "\n";
        std::cout << nn->value << "(" << l << ") ";
        q.pop();
    }
}

void CBinTree::Print()
{
    Levels(root);
    std::cout << "\n";
}

void VecInsert(CBinTree* t, int* v, int start, int end)
{
    if (start > end)
        return; // Si hemos llegado al final

    int mid = start + (end - start) / 2; // Calculamos el medio
    t->Insert(v[mid]); // Insertamos el elemento en ese indice en el arbol

    VecInsert(t, v, start, mid - 1); // Lo llamamos para el vector izquierdo
    VecInsert(t, v, mid + 1, end); // Lo llamamos para el vector derecho
}

void VecInsert(CBinTree* t, int* v, int size)
{
    //for (int i = 0; i < size; i++)
        //t->Insert(v[i]);
    VecInsert(t, v, 0, size - 1); // Llama a la otra version que permite la recursividad
}

/// Open GL

void DrawNode(CBinTreeNode* node, float x, float y, float space) { // Necesario para dibujar los Nodos
    if (node == nullptr) return;

    // Dibujamos el nodo actual
    glBegin(GL_POINTS);
    glVertex2f(x, y);
    glEnd();

    // Calculaamos la posicion  de los nodos hijos
    float nextSpace = (space / 2)+0.01;
    float childY = y - 0.1; //

    if (node->nodes[0]) {
        // Dibujar las líneas hacia el hijo izquierdo
        glBegin(GL_LINES);
        glVertex2f(x, y);
        glVertex2f(x - nextSpace, childY);
        glEnd();
        // Dibujar el hijo izquierdo
        DrawNode(node->nodes[0], x - nextSpace, childY, nextSpace);
    }

    if (node->nodes[1]) {
        // Dibujar línea hacia el hijo derecho
        glBegin(GL_LINES);
        glVertex2f(x, y);
        glVertex2f(x + nextSpace, childY);
        glEnd();
        // Dibujar el hijo derecho
        DrawNode(node->nodes[1], x + nextSpace, childY, nextSpace);
    }
}





int main(void)
{

    CBinTree t;
    int v[] = { 20,19,18,15,16,17,14,11,13,12,9,7,8,10,6,5,2,4,3,1 };
    VecInsert(&t, v, 20);
    t.Print();

    if (!glfwInit()) {       //(((((((((( Para evitar excepciones ///////////////
        cerr << "Error al inicializar GLFW\n";
        return -1;
    }

    // 
    //                                     width  , height   , Titulo              , monitor   , pantalla compartida
    GLFWwindow* window = glfwCreateWindow(640, 480, "Arbol Binario", NULL, NULL); // Creamos una ventana
    if (!window) { // Si no se abre
        cerr << "Error al crear la ventana GLFW\n";
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);

    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);

    glPointSize(10.0f);

    // Bucle principal hasta que el usuario cierre la ventana
    while (!glfwWindowShouldClose(window)) {
        // Renderizar aquí

        glClear(GL_COLOR_BUFFER_BIT);

        float initialX = 0.0f; // X Raiz
        float initialY = 0.9f; // Y Raiz
        float initialSpace = 0.5f; // Espacio inicial entre los nodos

        DrawNode(t.root, initialX, initialY, initialSpace); // Recursiva

        // Intercambiar los buffers frontales y traseros
        glfwSwapBuffers(window);

        // Procesar eventos pendientes
        glfwPollEvents();
    }

    glfwTerminate();
}
